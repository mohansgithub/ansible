
#
# Ansible playbook for provisioning production-ready infrastructure hosting a deployment
#
- name: Environment | Provision all required infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  pre_tasks:
    - name: Display all variables/facts known for the host
      debug: var=hostvars[inventory_hostname] verbosity=4
  roles:
    # Provision networking
    - {
        role: env-vpc,
        vpc_name: "{{ cms_vpc_name }}",
        vpc_region: "{{ cms_vpc_region }}",
        vpc_cidr_block: "{{ cms_vpc_cidr_block }}",
        vpc_subnets: "{{ cms_vpc_subnets }}",
        public_subnet_routes: "{{ cms_public_subnet_routes }}"
      }

    # Provision security groups
    - {
        role: env-security-groups,
        vpc_region: "{{ cms_vpc_region }}",
        vpc_id: "{{ vpc.vpc_id }}",
        ec2_group_inbound_sg: "{{ inbound_security_groups }}",
        ec2_group_outbound_sg: "{{ outbound_security_groups }}"
      }

    # Provision ECS with auto scaling EC2 instances
    - {
        role: env-ecs-autoscale,
        ec2_asg_desired_capacity: "{{ cms_ec2_asg_desired_capacity }}",
        ec2_asg_max_size: "{{ cms_ec2_asg_max_size }}",
        ecs_cluster_name: "{{ cms_ecs_cluster_name }}",
        ec2_security_groups: [
          "{{ ec2_group_inbound_sg.results[0].group_id }}",
          "{{ ec2_group_inbound_sg.results[1].group_id }}",
          "{{ ec2_group_inbound_sg.results[2].group_id }}",
          "{{ ec2_group_outbound_sg.results[0].group_id }}"
          ],
        ec2_asg_availability_zones: [
          "{{ subnet_ecscluster_az_1 }}",
          "{{ subnet_ecscluster_az_2 }}"
          ],
        ec2_asg_vpc_subnets: [
          "{{ vpc.subnets[0].id }}",
          "{{ vpc.subnets[1].id }}"
          ],
        ec2_asg_tags: "{{ ec2_tags }}",
        vpc_name: "{{ cms_vpc_name }}"
      }

    # Provision an ELB and register it with an alias in Route 53 (Content Delivery)
    - {
        role: env-elb,
        elb_name: "{{ contentdelivery_elb_name }}",
        vpc_name: "{{ cms_vpc_name }}",
        elb_listeners: "{{ contentdelivery_elb_listeners }}",
        elb_security_groups: [
          "{{ ec2_group_inbound_sg.results[0].group_id }}"
          ],
        elb_region: "{{ cms_elb_region }}",
        elb_subnets: [
           "{{ vpc.subnets[0].id }}",
           "{{ vpc.subnets[1].id }}"
         ],
        elb_health_check: "{{ contentdelivery_elb_health_check }}",
        route53_zone: "{{ my_route53_zone }}",
        route53_host: "contentdelivery-{{ application_name }}-{{ env }}.{{ my_route53_zone }}"
      }

    # Provision an ELB and register it with an alias in Route 53 (Content Authoring)
    - {
        role: env-elb,
        elb_name: "{{ contentauthoring_elb_name }}",
        vpc_name: "{{ cms_vpc_name }}",
        elb_listeners: "{{ contentauthoring_elb_listeners }}",
        elb_security_groups: [
          "{{ ec2_group_inbound_sg.results[0].group_id }}"
          ],
        elb_region: "{{ cms_elb_region }}",
        elb_subnets: [
           "{{ vpc.subnets[0].id }}",
           "{{ vpc.subnets[1].id }}"
         ],
        elb_health_check: "{{ contentauthoring_elb_health_check }}",
        route53_zone: "{{ my_route53_zone }}",
        route53_host: "contentauthoring-{{ application_name }}-{{ env }}.{{ my_route53_zone }}"
      }

    # Provision an RDS instance (Content Store)
    - {
        role: env-rds,
        rds_instance_name: "{{ contentstore_database_instance_name }}",
        rds_database_size: "{{ contentstore_database_size }}",
        rds_instance_type: "{{ contentstore_database_instance_type }}",
        rds_db_name: "{{ contentstore_database_name }}",
        rds_username: "{{ contentstore_database_username }}",
        rds_password: "{{ contentstore_database_password }}",
        rds_subnets: [
            "{{ vpc.subnets[2].id }}",
            "{{ vpc.subnets[3].id }}"
          ],
        rds_vpc_security_groups: "{{ ec2_group_inbound_sg.results[3].group_id }}"
      }

- name: Hippo CMS | Configure and run the Content Delivery/Authoring services
  hosts: localhost
  connection: local
  gather_facts: no
  roles:
    # Configure the Content Delivery service
    - {
        role: nginx-hippo-on-ecs,
        component: "contentdelivery",
        vpc_name: "{{ cms_vpc_name }}",
        nginx_conf: "{{ contentdelivery_reverseproxy_config }}",
        contentstore_database_host: "{{ rds.instance.endpoint }}",
        distribution_source_url: "{{ contentdelivery_distribution_url }}",
        elb_name: "{{ contentdelivery_elb_name }}",
        ecs_cluster_name: "{{ cms_ecs_cluster_name }}",
        ecs_task_definition_count: "{{ contentdelivery_ecs_task_definition_count }}"
      }

    # Configure the Content Authoring service
    - {
        role: nginx-hippo-on-ecs,
        component: "contentauthoring",
        vpc_name: "{{ cms_vpc_name }}",
        nginx_conf: "{{ contentauthoring_reverseproxy_config }}",
        contentstore_database_host: "{{ rds.instance.endpoint }}",
        distribution_source_url: "{{ contentauthoring_distribution_url }}",
        elb_name: "{{ contentauthoring_elb_name }}",
        ecs_cluster_name: "{{ cms_ecs_cluster_name }}",
        ecs_task_definition_count: "{{ contentauthoring_ecs_task_definition_count }}"
      }
